
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Moderation` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */

import type * as PJTG from '../pjtg';
import * as runtime from "@prisma/client/runtime/client"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Moderation
 * 
 */
export type ModerationModel = runtime.Types.Result.DefaultSelection<Prisma.$ModerationPayload>

export type AggregateModeration = {
  _count: ModerationCountAggregateOutputType | null
  _avg: ModerationAvgAggregateOutputType | null
  _sum: ModerationSumAggregateOutputType | null
  _min: ModerationMinAggregateOutputType | null
  _max: ModerationMaxAggregateOutputType | null
}

export type ModerationAvgAggregateOutputType = {
  caseId: number | null
  duration: number | null
  type: number | null
  metadata: number | null
}

export type ModerationSumAggregateOutputType = {
  caseId: number | null
  duration: bigint | null
  type: number | null
  metadata: number | null
}

export type ModerationMinAggregateOutputType = {
  caseId: number | null
  createdAt: Date | null
  duration: bigint | null
  guildId: string | null
  moderatorId: string | null
  reason: string | null
  imageURL: string | null
  userId: string | null
  type: number | null
  metadata: number | null
}

export type ModerationMaxAggregateOutputType = {
  caseId: number | null
  createdAt: Date | null
  duration: bigint | null
  guildId: string | null
  moderatorId: string | null
  reason: string | null
  imageURL: string | null
  userId: string | null
  type: number | null
  metadata: number | null
}

export type ModerationCountAggregateOutputType = {
  caseId: number
  createdAt: number
  duration: number
  extraData: number
  guildId: number
  moderatorId: number
  reason: number
  imageURL: number
  userId: number
  type: number
  metadata: number
  _all: number
}


export type ModerationAvgAggregateInputType = {
  caseId?: true
  duration?: true
  type?: true
  metadata?: true
}

export type ModerationSumAggregateInputType = {
  caseId?: true
  duration?: true
  type?: true
  metadata?: true
}

export type ModerationMinAggregateInputType = {
  caseId?: true
  createdAt?: true
  duration?: true
  guildId?: true
  moderatorId?: true
  reason?: true
  imageURL?: true
  userId?: true
  type?: true
  metadata?: true
}

export type ModerationMaxAggregateInputType = {
  caseId?: true
  createdAt?: true
  duration?: true
  guildId?: true
  moderatorId?: true
  reason?: true
  imageURL?: true
  userId?: true
  type?: true
  metadata?: true
}

export type ModerationCountAggregateInputType = {
  caseId?: true
  createdAt?: true
  duration?: true
  extraData?: true
  guildId?: true
  moderatorId?: true
  reason?: true
  imageURL?: true
  userId?: true
  type?: true
  metadata?: true
  _all?: true
}

export type ModerationAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Moderation to aggregate.
   */
  where?: Prisma.ModerationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Moderations to fetch.
   */
  orderBy?: Prisma.ModerationOrderByWithRelationInput | Prisma.ModerationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ModerationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Moderations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Moderations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Moderations
  **/
  _count?: true | ModerationCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: ModerationAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: ModerationSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ModerationMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ModerationMaxAggregateInputType
}

export type GetModerationAggregateType<T extends ModerationAggregateArgs> = {
      [P in keyof T & keyof AggregateModeration]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateModeration[P]>
    : Prisma.GetScalarType<T[P], AggregateModeration[P]>
}




export type ModerationGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ModerationWhereInput
  orderBy?: Prisma.ModerationOrderByWithAggregationInput | Prisma.ModerationOrderByWithAggregationInput[]
  by: Prisma.ModerationScalarFieldEnum[] | Prisma.ModerationScalarFieldEnum
  having?: Prisma.ModerationScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ModerationCountAggregateInputType | true
  _avg?: ModerationAvgAggregateInputType
  _sum?: ModerationSumAggregateInputType
  _min?: ModerationMinAggregateInputType
  _max?: ModerationMaxAggregateInputType
}

export type ModerationGroupByOutputType = {
  caseId: number
  createdAt: Date | null
  duration: bigint | null
  extraData: unknown | null
  guildId: string
  moderatorId: string
  reason: string | null
  imageURL: string | null
  userId: string | null
  type: number
  metadata: number
  _count: ModerationCountAggregateOutputType | null
  _avg: ModerationAvgAggregateOutputType | null
  _sum: ModerationSumAggregateOutputType | null
  _min: ModerationMinAggregateOutputType | null
  _max: ModerationMaxAggregateOutputType | null
}

type GetModerationGroupByPayload<T extends ModerationGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ModerationGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ModerationGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ModerationGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ModerationGroupByOutputType[P]>
      }
    >
  >



export type ModerationWhereInput = {
  AND?: Prisma.ModerationWhereInput | Prisma.ModerationWhereInput[]
  OR?: Prisma.ModerationWhereInput[]
  NOT?: Prisma.ModerationWhereInput | Prisma.ModerationWhereInput[]
  caseId?: Prisma.IntFilter<"Moderation"> | number
  createdAt?: Prisma.DateTimeNullableFilter<"Moderation"> | Date | string | null
  duration?: Prisma.BigIntNullableFilter<"Moderation"> | bigint | number | null
  extraData?: Prisma.JsonNullableFilter<"Moderation">
  guildId?: Prisma.StringFilter<"Moderation"> | string
  moderatorId?: Prisma.StringFilter<"Moderation"> | string
  reason?: Prisma.StringNullableFilter<"Moderation"> | string | null
  imageURL?: Prisma.StringNullableFilter<"Moderation"> | string | null
  userId?: Prisma.StringNullableFilter<"Moderation"> | string | null
  type?: Prisma.IntFilter<"Moderation"> | number
  metadata?: Prisma.IntFilter<"Moderation"> | number
}

export type ModerationOrderByWithRelationInput = {
  caseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  extraData?: Prisma.SortOrderInput | Prisma.SortOrder
  guildId?: Prisma.SortOrder
  moderatorId?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  imageURL?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ModerationWhereUniqueInput = Prisma.AtLeast<{
  caseId_guildId?: Prisma.ModerationCaseIdGuildIdCompoundUniqueInput
  AND?: Prisma.ModerationWhereInput | Prisma.ModerationWhereInput[]
  OR?: Prisma.ModerationWhereInput[]
  NOT?: Prisma.ModerationWhereInput | Prisma.ModerationWhereInput[]
  caseId?: Prisma.IntFilter<"Moderation"> | number
  createdAt?: Prisma.DateTimeNullableFilter<"Moderation"> | Date | string | null
  duration?: Prisma.BigIntNullableFilter<"Moderation"> | bigint | number | null
  extraData?: Prisma.JsonNullableFilter<"Moderation">
  guildId?: Prisma.StringFilter<"Moderation"> | string
  moderatorId?: Prisma.StringFilter<"Moderation"> | string
  reason?: Prisma.StringNullableFilter<"Moderation"> | string | null
  imageURL?: Prisma.StringNullableFilter<"Moderation"> | string | null
  userId?: Prisma.StringNullableFilter<"Moderation"> | string | null
  type?: Prisma.IntFilter<"Moderation"> | number
  metadata?: Prisma.IntFilter<"Moderation"> | number
}, "caseId_guildId">

export type ModerationOrderByWithAggregationInput = {
  caseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrderInput | Prisma.SortOrder
  duration?: Prisma.SortOrderInput | Prisma.SortOrder
  extraData?: Prisma.SortOrderInput | Prisma.SortOrder
  guildId?: Prisma.SortOrder
  moderatorId?: Prisma.SortOrder
  reason?: Prisma.SortOrderInput | Prisma.SortOrder
  imageURL?: Prisma.SortOrderInput | Prisma.SortOrder
  userId?: Prisma.SortOrderInput | Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
  _count?: Prisma.ModerationCountOrderByAggregateInput
  _avg?: Prisma.ModerationAvgOrderByAggregateInput
  _max?: Prisma.ModerationMaxOrderByAggregateInput
  _min?: Prisma.ModerationMinOrderByAggregateInput
  _sum?: Prisma.ModerationSumOrderByAggregateInput
}

export type ModerationScalarWhereWithAggregatesInput = {
  AND?: Prisma.ModerationScalarWhereWithAggregatesInput | Prisma.ModerationScalarWhereWithAggregatesInput[]
  OR?: Prisma.ModerationScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ModerationScalarWhereWithAggregatesInput | Prisma.ModerationScalarWhereWithAggregatesInput[]
  caseId?: Prisma.IntWithAggregatesFilter<"Moderation"> | number
  createdAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Moderation"> | Date | string | null
  duration?: Prisma.BigIntNullableWithAggregatesFilter<"Moderation"> | bigint | number | null
  extraData?: Prisma.JsonNullableWithAggregatesFilter<"Moderation">
  guildId?: Prisma.StringWithAggregatesFilter<"Moderation"> | string
  moderatorId?: Prisma.StringWithAggregatesFilter<"Moderation"> | string
  reason?: Prisma.StringNullableWithAggregatesFilter<"Moderation"> | string | null
  imageURL?: Prisma.StringNullableWithAggregatesFilter<"Moderation"> | string | null
  userId?: Prisma.StringNullableWithAggregatesFilter<"Moderation"> | string | null
  type?: Prisma.IntWithAggregatesFilter<"Moderation"> | number
  metadata?: Prisma.IntWithAggregatesFilter<"Moderation"> | number
}

export type ModerationCreateInput = {
  caseId: number
  createdAt?: Date | string | null
  duration?: bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId: string
  moderatorId: string
  reason?: string | null
  imageURL?: string | null
  userId?: string | null
  type: number
  metadata?: number
}

export type ModerationUncheckedCreateInput = {
  caseId: number
  createdAt?: Date | string | null
  duration?: bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId: string
  moderatorId: string
  reason?: string | null
  imageURL?: string | null
  userId?: string | null
  type: number
  metadata?: number
}

export type ModerationUpdateInput = {
  caseId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId?: Prisma.StringFieldUpdateOperationsInput | string
  moderatorId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageURL?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  metadata?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModerationUncheckedUpdateInput = {
  caseId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId?: Prisma.StringFieldUpdateOperationsInput | string
  moderatorId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageURL?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  metadata?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModerationCreateManyInput = {
  caseId: number
  createdAt?: Date | string | null
  duration?: bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId: string
  moderatorId: string
  reason?: string | null
  imageURL?: string | null
  userId?: string | null
  type: number
  metadata?: number
}

export type ModerationUpdateManyMutationInput = {
  caseId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId?: Prisma.StringFieldUpdateOperationsInput | string
  moderatorId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageURL?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  metadata?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModerationUncheckedUpdateManyInput = {
  caseId?: Prisma.IntFieldUpdateOperationsInput | number
  createdAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  duration?: Prisma.NullableBigIntFieldUpdateOperationsInput | bigint | number | null
  extraData?: unknown | Prisma.NullableJsonNullValueInput
  guildId?: Prisma.StringFieldUpdateOperationsInput | string
  moderatorId?: Prisma.StringFieldUpdateOperationsInput | string
  reason?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  imageURL?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  userId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  type?: Prisma.IntFieldUpdateOperationsInput | number
  metadata?: Prisma.IntFieldUpdateOperationsInput | number
}

export type ModerationCaseIdGuildIdCompoundUniqueInput = {
  caseId: number
  guildId: string
}

export type ModerationCountOrderByAggregateInput = {
  caseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  extraData?: Prisma.SortOrder
  guildId?: Prisma.SortOrder
  moderatorId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  imageURL?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ModerationAvgOrderByAggregateInput = {
  caseId?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ModerationMaxOrderByAggregateInput = {
  caseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  guildId?: Prisma.SortOrder
  moderatorId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  imageURL?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ModerationMinOrderByAggregateInput = {
  caseId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  guildId?: Prisma.SortOrder
  moderatorId?: Prisma.SortOrder
  reason?: Prisma.SortOrder
  imageURL?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type ModerationSumOrderByAggregateInput = {
  caseId?: Prisma.SortOrder
  duration?: Prisma.SortOrder
  type?: Prisma.SortOrder
  metadata?: Prisma.SortOrder
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}



export type ModerationSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  caseId?: boolean
  createdAt?: boolean
  duration?: boolean
  extraData?: boolean
  guildId?: boolean
  moderatorId?: boolean
  reason?: boolean
  imageURL?: boolean
  userId?: boolean
  type?: boolean
  metadata?: boolean
}, ExtArgs["result"]["moderation"]>

export type ModerationSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  caseId?: boolean
  createdAt?: boolean
  duration?: boolean
  extraData?: boolean
  guildId?: boolean
  moderatorId?: boolean
  reason?: boolean
  imageURL?: boolean
  userId?: boolean
  type?: boolean
  metadata?: boolean
}, ExtArgs["result"]["moderation"]>

export type ModerationSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  caseId?: boolean
  createdAt?: boolean
  duration?: boolean
  extraData?: boolean
  guildId?: boolean
  moderatorId?: boolean
  reason?: boolean
  imageURL?: boolean
  userId?: boolean
  type?: boolean
  metadata?: boolean
}, ExtArgs["result"]["moderation"]>

export type ModerationSelectScalar = {
  caseId?: boolean
  createdAt?: boolean
  duration?: boolean
  extraData?: boolean
  guildId?: boolean
  moderatorId?: boolean
  reason?: boolean
  imageURL?: boolean
  userId?: boolean
  type?: boolean
  metadata?: boolean
}

export type ModerationOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"caseId" | "createdAt" | "duration" | "extraData" | "guildId" | "moderatorId" | "reason" | "imageURL" | "userId" | "type" | "metadata", ExtArgs["result"]["moderation"]>

export type $ModerationPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Moderation"
  objects: {}
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    caseId: number
    createdAt: Date | null
    duration: bigint | null
    extraData: unknown | null
    guildId: string
    moderatorId: string
    reason: string | null
    imageURL: string | null
    userId: string | null
    type: number
    metadata: number
  }, ExtArgs["result"]["moderation"]>
  composites: {}
}

export type ModerationGetPayload<S extends boolean | null | undefined | ModerationDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ModerationPayload, S>

export type ModerationCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ModerationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ModerationCountAggregateInputType | true
  }

export interface ModerationDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Moderation'], meta: { name: 'Moderation' } }
  /**
   * Find zero or one Moderation that matches the filter.
   * @param {ModerationFindUniqueArgs} args - Arguments to find a Moderation
   * @example
   * // Get one Moderation
   * const moderation = await prisma.moderation.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ModerationFindUniqueArgs>(args: Prisma.SelectSubset<T, ModerationFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Moderation that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ModerationFindUniqueOrThrowArgs} args - Arguments to find a Moderation
   * @example
   * // Get one Moderation
   * const moderation = await prisma.moderation.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ModerationFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ModerationFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Moderation that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationFindFirstArgs} args - Arguments to find a Moderation
   * @example
   * // Get one Moderation
   * const moderation = await prisma.moderation.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ModerationFindFirstArgs>(args?: Prisma.SelectSubset<T, ModerationFindFirstArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Moderation that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationFindFirstOrThrowArgs} args - Arguments to find a Moderation
   * @example
   * // Get one Moderation
   * const moderation = await prisma.moderation.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ModerationFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ModerationFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Moderations that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Moderations
   * const moderations = await prisma.moderation.findMany()
   * 
   * // Get first 10 Moderations
   * const moderations = await prisma.moderation.findMany({ take: 10 })
   * 
   * // Only select the `caseId`
   * const moderationWithCaseIdOnly = await prisma.moderation.findMany({ select: { caseId: true } })
   * 
   */
  findMany<T extends ModerationFindManyArgs>(args?: Prisma.SelectSubset<T, ModerationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Moderation.
   * @param {ModerationCreateArgs} args - Arguments to create a Moderation.
   * @example
   * // Create one Moderation
   * const Moderation = await prisma.moderation.create({
   *   data: {
   *     // ... data to create a Moderation
   *   }
   * })
   * 
   */
  create<T extends ModerationCreateArgs>(args: Prisma.SelectSubset<T, ModerationCreateArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Moderations.
   * @param {ModerationCreateManyArgs} args - Arguments to create many Moderations.
   * @example
   * // Create many Moderations
   * const moderation = await prisma.moderation.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ModerationCreateManyArgs>(args?: Prisma.SelectSubset<T, ModerationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Moderations and returns the data saved in the database.
   * @param {ModerationCreateManyAndReturnArgs} args - Arguments to create many Moderations.
   * @example
   * // Create many Moderations
   * const moderation = await prisma.moderation.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Moderations and only return the `caseId`
   * const moderationWithCaseIdOnly = await prisma.moderation.createManyAndReturn({
   *   select: { caseId: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ModerationCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ModerationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Moderation.
   * @param {ModerationDeleteArgs} args - Arguments to delete one Moderation.
   * @example
   * // Delete one Moderation
   * const Moderation = await prisma.moderation.delete({
   *   where: {
   *     // ... filter to delete one Moderation
   *   }
   * })
   * 
   */
  delete<T extends ModerationDeleteArgs>(args: Prisma.SelectSubset<T, ModerationDeleteArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Moderation.
   * @param {ModerationUpdateArgs} args - Arguments to update one Moderation.
   * @example
   * // Update one Moderation
   * const moderation = await prisma.moderation.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ModerationUpdateArgs>(args: Prisma.SelectSubset<T, ModerationUpdateArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Moderations.
   * @param {ModerationDeleteManyArgs} args - Arguments to filter Moderations to delete.
   * @example
   * // Delete a few Moderations
   * const { count } = await prisma.moderation.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ModerationDeleteManyArgs>(args?: Prisma.SelectSubset<T, ModerationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Moderations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Moderations
   * const moderation = await prisma.moderation.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ModerationUpdateManyArgs>(args: Prisma.SelectSubset<T, ModerationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Moderations and returns the data updated in the database.
   * @param {ModerationUpdateManyAndReturnArgs} args - Arguments to update many Moderations.
   * @example
   * // Update many Moderations
   * const moderation = await prisma.moderation.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Moderations and only return the `caseId`
   * const moderationWithCaseIdOnly = await prisma.moderation.updateManyAndReturn({
   *   select: { caseId: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ModerationUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ModerationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Moderation.
   * @param {ModerationUpsertArgs} args - Arguments to update or create a Moderation.
   * @example
   * // Update or create a Moderation
   * const moderation = await prisma.moderation.upsert({
   *   create: {
   *     // ... data to create a Moderation
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Moderation we want to update
   *   }
   * })
   */
  upsert<T extends ModerationUpsertArgs>(args: Prisma.SelectSubset<T, ModerationUpsertArgs<ExtArgs>>): Prisma.Prisma__ModerationClient<runtime.Types.Result.GetResult<Prisma.$ModerationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Moderations.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationCountArgs} args - Arguments to filter Moderations to count.
   * @example
   * // Count the number of Moderations
   * const count = await prisma.moderation.count({
   *   where: {
   *     // ... the filter for the Moderations we want to count
   *   }
   * })
  **/
  count<T extends ModerationCountArgs>(
    args?: Prisma.Subset<T, ModerationCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ModerationCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Moderation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ModerationAggregateArgs>(args: Prisma.Subset<T, ModerationAggregateArgs>): Prisma.PrismaPromise<GetModerationAggregateType<T>>

  /**
   * Group by Moderation.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ModerationGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ModerationGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ModerationGroupByArgs['orderBy'] }
      : { orderBy?: ModerationGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ModerationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetModerationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Moderation model
 */
readonly fields: ModerationFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Moderation.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ModerationClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Moderation model
 */
export interface ModerationFieldRefs {
  readonly caseId: Prisma.FieldRef<"Moderation", 'Int'>
  readonly createdAt: Prisma.FieldRef<"Moderation", 'DateTime'>
  readonly duration: Prisma.FieldRef<"Moderation", 'BigInt'>
  readonly extraData: Prisma.FieldRef<"Moderation", 'Json'>
  readonly guildId: Prisma.FieldRef<"Moderation", 'String'>
  readonly moderatorId: Prisma.FieldRef<"Moderation", 'String'>
  readonly reason: Prisma.FieldRef<"Moderation", 'String'>
  readonly imageURL: Prisma.FieldRef<"Moderation", 'String'>
  readonly userId: Prisma.FieldRef<"Moderation", 'String'>
  readonly type: Prisma.FieldRef<"Moderation", 'Int'>
  readonly metadata: Prisma.FieldRef<"Moderation", 'Int'>
}
    

// Custom InputTypes
/**
 * Moderation findUnique
 */
export type ModerationFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter, which Moderation to fetch.
   */
  where: Prisma.ModerationWhereUniqueInput
}

/**
 * Moderation findUniqueOrThrow
 */
export type ModerationFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter, which Moderation to fetch.
   */
  where: Prisma.ModerationWhereUniqueInput
}

/**
 * Moderation findFirst
 */
export type ModerationFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter, which Moderation to fetch.
   */
  where?: Prisma.ModerationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Moderations to fetch.
   */
  orderBy?: Prisma.ModerationOrderByWithRelationInput | Prisma.ModerationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Moderations.
   */
  cursor?: Prisma.ModerationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Moderations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Moderations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Moderations.
   */
  distinct?: Prisma.ModerationScalarFieldEnum | Prisma.ModerationScalarFieldEnum[]
}

/**
 * Moderation findFirstOrThrow
 */
export type ModerationFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter, which Moderation to fetch.
   */
  where?: Prisma.ModerationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Moderations to fetch.
   */
  orderBy?: Prisma.ModerationOrderByWithRelationInput | Prisma.ModerationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Moderations.
   */
  cursor?: Prisma.ModerationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Moderations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Moderations.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Moderations.
   */
  distinct?: Prisma.ModerationScalarFieldEnum | Prisma.ModerationScalarFieldEnum[]
}

/**
 * Moderation findMany
 */
export type ModerationFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter, which Moderations to fetch.
   */
  where?: Prisma.ModerationWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Moderations to fetch.
   */
  orderBy?: Prisma.ModerationOrderByWithRelationInput | Prisma.ModerationOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Moderations.
   */
  cursor?: Prisma.ModerationWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Moderations from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Moderations.
   */
  skip?: number
  distinct?: Prisma.ModerationScalarFieldEnum | Prisma.ModerationScalarFieldEnum[]
}

/**
 * Moderation create
 */
export type ModerationCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * The data needed to create a Moderation.
   */
  data: Prisma.XOR<Prisma.ModerationCreateInput, Prisma.ModerationUncheckedCreateInput>
}

/**
 * Moderation createMany
 */
export type ModerationCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Moderations.
   */
  data: Prisma.ModerationCreateManyInput | Prisma.ModerationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Moderation createManyAndReturn
 */
export type ModerationCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * The data used to create many Moderations.
   */
  data: Prisma.ModerationCreateManyInput | Prisma.ModerationCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Moderation update
 */
export type ModerationUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * The data needed to update a Moderation.
   */
  data: Prisma.XOR<Prisma.ModerationUpdateInput, Prisma.ModerationUncheckedUpdateInput>
  /**
   * Choose, which Moderation to update.
   */
  where: Prisma.ModerationWhereUniqueInput
}

/**
 * Moderation updateMany
 */
export type ModerationUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Moderations.
   */
  data: Prisma.XOR<Prisma.ModerationUpdateManyMutationInput, Prisma.ModerationUncheckedUpdateManyInput>
  /**
   * Filter which Moderations to update
   */
  where?: Prisma.ModerationWhereInput
  /**
   * Limit how many Moderations to update.
   */
  limit?: number
}

/**
 * Moderation updateManyAndReturn
 */
export type ModerationUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * The data used to update Moderations.
   */
  data: Prisma.XOR<Prisma.ModerationUpdateManyMutationInput, Prisma.ModerationUncheckedUpdateManyInput>
  /**
   * Filter which Moderations to update
   */
  where?: Prisma.ModerationWhereInput
  /**
   * Limit how many Moderations to update.
   */
  limit?: number
}

/**
 * Moderation upsert
 */
export type ModerationUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * The filter to search for the Moderation to update in case it exists.
   */
  where: Prisma.ModerationWhereUniqueInput
  /**
   * In case the Moderation found by the `where` argument doesn't exist, create a new Moderation with this data.
   */
  create: Prisma.XOR<Prisma.ModerationCreateInput, Prisma.ModerationUncheckedCreateInput>
  /**
   * In case the Moderation was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ModerationUpdateInput, Prisma.ModerationUncheckedUpdateInput>
}

/**
 * Moderation delete
 */
export type ModerationDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
  /**
   * Filter which Moderation to delete.
   */
  where: Prisma.ModerationWhereUniqueInput
}

/**
 * Moderation deleteMany
 */
export type ModerationDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Moderations to delete
   */
  where?: Prisma.ModerationWhereInput
  /**
   * Limit how many Moderations to delete.
   */
  limit?: number
}

/**
 * Moderation without action
 */
export type ModerationDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Moderation
   */
  select?: Prisma.ModerationSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Moderation
   */
  omit?: Prisma.ModerationOmit<ExtArgs> | null
}
