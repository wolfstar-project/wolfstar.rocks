
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * WARNING: This is an internal file that is subject to change!
 *
 * ðŸ›‘ Under no circumstances should you import this file directly! ðŸ›‘
 *
 * All exports from this file are wrapped under a `Prisma` namespace object in the client.ts file.
 * While this enables partial backward compatibility, it is not part of the stable public API.
 *
 * If you are looking for your Models, Enums, and Input Types, please import them from the respective
 * model files in the `model` directory!
 */

import * as runtime from "@prisma/client/runtime/client"
import type * as Prisma from "../models"
import { type PrismaClient } from "./class"

export type * from '../models'

export type DMMF = typeof runtime.DMMF

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

/**
 * Validator
 */
export const validator = runtime.Public.validator

/**
 * Prisma Errors
 */

export const PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
export type PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError

export const PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
export type PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError

export const PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
export type PrismaClientRustPanicError = runtime.PrismaClientRustPanicError

export const PrismaClientInitializationError = runtime.PrismaClientInitializationError
export type PrismaClientInitializationError = runtime.PrismaClientInitializationError

export const PrismaClientValidationError = runtime.PrismaClientValidationError
export type PrismaClientValidationError = runtime.PrismaClientValidationError

/**
 * Re-export of sql-template-tag
 */
export const sql = runtime.sqltag
export const empty = runtime.empty
export const join = runtime.join
export const raw = runtime.raw
export const Sql = runtime.Sql
export type Sql = runtime.Sql



/**
 * Decimal.js
 */
export const Decimal = runtime.Decimal
export type Decimal = runtime.Decimal

export type DecimalJsLike = runtime.DecimalJsLike

/**
 * Metrics
 */
export type Metrics = runtime.Metrics
export type Metric<T> = runtime.Metric<T>
export type MetricHistogram = runtime.MetricHistogram
export type MetricHistogramBucket = runtime.MetricHistogramBucket

/**
* Extensions
*/
export type Extension = runtime.Types.Extensions.UserArgs
export const getExtensionContext = runtime.Extensions.getExtensionContext
export type Args<T, F extends runtime.Operation> = runtime.Types.Public.Args<T, F>
export type Payload<T, F extends runtime.Operation = never> = runtime.Types.Public.Payload<T, F>
export type Result<T, A, F extends runtime.Operation> = runtime.Types.Public.Result<T, A, F>
export type Exact<A, W> = runtime.Types.Public.Exact<A, W>

export type PrismaVersion = {
  client: string
  engine: string
}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
export const prismaVersion: PrismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

/**
 * Utility Types
 */

export type JsonObject = runtime.JsonObject
export type JsonArray = runtime.JsonArray
export type JsonValue = runtime.JsonValue
export type InputJsonObject = runtime.InputJsonObject
export type InputJsonArray = runtime.InputJsonArray
export type InputJsonValue = runtime.InputJsonValue

export const NullTypes = {
  DbNull: runtime.objectEnumValues.classes.DbNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.DbNull),
  JsonNull: runtime.objectEnumValues.classes.JsonNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.JsonNull),
  AnyNull: runtime.objectEnumValues.classes.AnyNull as (new (secret: never) => typeof runtime.objectEnumValues.instances.AnyNull),
}

/**
 * Helper for filtering JSON entries that have `null` on the database (empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const DbNull = runtime.objectEnumValues.instances.DbNull

/**
 * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const JsonNull = runtime.objectEnumValues.instances.JsonNull

/**
 * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
 *
 * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
 */
export const AnyNull = runtime.objectEnumValues.instances.AnyNull

type SelectAndInclude = {
  select: any
  include: any
}

type SelectAndOmit = {
  select: any
  omit: any
}

/**
 * From T, pick a set of properties whose keys are in the union K
 */
type Prisma__Pick<T, K extends keyof T> = {
    [P in K]: T[P];
};

export type Enumerable<T> = T | Array<T>;

/**
 * Subset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
 */
export type Subset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never;
};

/**
 * SelectSubset
 * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
 * Additionally, it validates, if both select and include are present. If the case, it errors.
 */
export type SelectSubset<T, U> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  (T extends SelectAndInclude
    ? 'Please either choose `select` or `include`.'
    : T extends SelectAndOmit
      ? 'Please either choose `select` or `omit`.'
      : {})

/**
 * Subset + Intersection
 * @desc From `T` pick properties that exist in `U` and intersect `K`
 */
export type SubsetIntersection<T, U, K> = {
  [key in keyof T]: key extends keyof U ? T[key] : never
} &
  K

type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

/**
 * XOR is needed to have a real mutually exclusive union type
 * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
 */
export type XOR<T, U> =
  T extends object ?
  U extends object ?
    (Without<T, U> & U) | (Without<U, T> & T)
  : U : T


/**
 * Is T a Record?
 */
type IsObject<T extends any> = T extends Array<any>
? False
: T extends Date
? False
: T extends Uint8Array
? False
: T extends BigInt
? False
: T extends object
? True
: False


/**
 * If it's T[], return T
 */
export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

/**
 * From ts-toolbelt
 */

type __Either<O extends object, K extends Key> = Omit<O, K> &
  {
    // Merge all but K
    [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
  }[K]

type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

type _Either<
  O extends object,
  K extends Key,
  strict extends Boolean
> = {
  1: EitherStrict<O, K>
  0: EitherLoose<O, K>
}[strict]

export type Either<
  O extends object,
  K extends Key,
  strict extends Boolean = 1
> = O extends unknown ? _Either<O, K, strict> : never

export type Union = any

export type PatchUndefined<O extends object, O1 extends object> = {
  [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
} & {}

/** Helper Types for "Merge" **/
export type IntersectOf<U extends Union> = (
  U extends unknown ? (k: U) => void : never
) extends (k: infer I) => void
  ? I
  : never

export type Overwrite<O extends object, O1 extends object> = {
    [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
} & {};

type _Merge<U extends object> = IntersectOf<Overwrite<U, {
    [K in keyof U]-?: At<U, K>;
}>>;

type Key = string | number | symbol;
type AtStrict<O extends object, K extends Key> = O[K & keyof O];
type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
    1: AtStrict<O, K>;
    0: AtLoose<O, K>;
}[strict];

export type ComputeRaw<A extends any> = A extends Function ? A : {
  [K in keyof A]: A[K];
} & {};

export type OptionalFlat<O> = {
  [K in keyof O]?: O[K];
} & {};

type _Record<K extends keyof any, T> = {
  [P in K]: T;
};

// cause typescript not to expand types and preserve names
type NoExpand<T> = T extends unknown ? T : never;

// this type assumes the passed object is entirely optional
export type AtLeast<O extends object, K extends string> = NoExpand<
  O extends unknown
  ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
    | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
  : never>;

type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
/** End Helper Types for "Merge" **/

export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

export type Boolean = True | False

export type True = 1

export type False = 0

export type Not<B extends Boolean> = {
  0: 1
  1: 0
}[B]

export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
  ? 0 // anything `never` is false
  : A1 extends A2
  ? 1
  : 0

export type Has<U extends Union, U1 extends Union> = Not<
  Extends<Exclude<U1, U>, U1>
>

export type Or<B1 extends Boolean, B2 extends Boolean> = {
  0: {
    0: 0
    1: 1
  }
  1: {
    0: 1
    1: 1
  }
}[B1][B2]

export type Keys<U extends Union> = U extends unknown ? keyof U : never

export type GetScalarType<T, O> = O extends object ? {
  [P in keyof T]: P extends keyof O
    ? O[P]
    : never
} : never

type FieldPaths<
  T,
  U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
> = IsObject<T> extends True ? U : T

export type GetHavingFields<T> = {
  [K in keyof T]: Or<
    Or<Extends<'OR', K>, Extends<'AND', K>>,
    Extends<'NOT', K>
  > extends True
    ? // infer is only needed to not hit TS limit
      // based on the brilliant idea of Pierre-Antoine Mills
      // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
      T[K] extends infer TK
      ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
      : never
    : {} extends FieldPaths<T[K]>
    ? never
    : K
}[keyof T]

/**
 * Convert tuple to union
 */
type _TupleToUnion<T> = T extends (infer E)[] ? E : never
type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
export type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

/**
 * Like `Pick`, but additionally can also accept an array of keys
 */
export type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

/**
 * Exclude all keys with underscores
 */
export type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


export const ModelName = {
  Guild: 'Guild',
  Migration: 'Migration',
  Moderation: 'Moderation',
  Schedule: 'Schedule',
  User: 'User'
} as const

export type ModelName = (typeof ModelName)[keyof typeof ModelName]



export interface TypeMapCb<GlobalOmitOptions = {}> extends runtime.Types.Utils.Fn<{extArgs: runtime.Types.Extensions.InternalArgs }, runtime.Types.Utils.Record<string, any>> {
  returns: TypeMap<this['params']['extArgs'], GlobalOmitOptions>
}

export type TypeMap<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
  globalOmitOptions: {
    omit: GlobalOmitOptions
  }
  meta: {
    modelProps: "guild" | "migration" | "moderation" | "schedule" | "user"
    txIsolationLevel: TransactionIsolationLevel
  }
  model: {
    Guild: {
      payload: Prisma.$GuildPayload<ExtArgs>
      fields: Prisma.GuildFieldRefs
      operations: {
        findUnique: {
          args: Prisma.GuildFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.GuildFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        findFirst: {
          args: Prisma.GuildFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.GuildFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        findMany: {
          args: Prisma.GuildFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>[]
        }
        create: {
          args: Prisma.GuildCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        createMany: {
          args: Prisma.GuildCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.GuildCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>[]
        }
        delete: {
          args: Prisma.GuildDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        update: {
          args: Prisma.GuildUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        deleteMany: {
          args: Prisma.GuildDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.GuildUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.GuildUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>[]
        }
        upsert: {
          args: Prisma.GuildUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$GuildPayload>
        }
        aggregate: {
          args: Prisma.GuildAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateGuild>
        }
        groupBy: {
          args: Prisma.GuildGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GuildGroupByOutputType>[]
        }
        count: {
          args: Prisma.GuildCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.GuildCountAggregateOutputType> | number
        }
      }
    }
    Migration: {
      payload: Prisma.$MigrationPayload<ExtArgs>
      fields: Prisma.MigrationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.MigrationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.MigrationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        findFirst: {
          args: Prisma.MigrationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.MigrationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        findMany: {
          args: Prisma.MigrationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>[]
        }
        create: {
          args: Prisma.MigrationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        createMany: {
          args: Prisma.MigrationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.MigrationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>[]
        }
        delete: {
          args: Prisma.MigrationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        update: {
          args: Prisma.MigrationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        deleteMany: {
          args: Prisma.MigrationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.MigrationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.MigrationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>[]
        }
        upsert: {
          args: Prisma.MigrationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$MigrationPayload>
        }
        aggregate: {
          args: Prisma.MigrationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateMigration>
        }
        groupBy: {
          args: Prisma.MigrationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MigrationGroupByOutputType>[]
        }
        count: {
          args: Prisma.MigrationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.MigrationCountAggregateOutputType> | number
        }
      }
    }
    Moderation: {
      payload: Prisma.$ModerationPayload<ExtArgs>
      fields: Prisma.ModerationFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ModerationFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ModerationFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        findFirst: {
          args: Prisma.ModerationFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ModerationFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        findMany: {
          args: Prisma.ModerationFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>[]
        }
        create: {
          args: Prisma.ModerationCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        createMany: {
          args: Prisma.ModerationCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ModerationCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>[]
        }
        delete: {
          args: Prisma.ModerationDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        update: {
          args: Prisma.ModerationUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        deleteMany: {
          args: Prisma.ModerationDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ModerationUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ModerationUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>[]
        }
        upsert: {
          args: Prisma.ModerationUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$ModerationPayload>
        }
        aggregate: {
          args: Prisma.ModerationAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateModeration>
        }
        groupBy: {
          args: Prisma.ModerationGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModerationGroupByOutputType>[]
        }
        count: {
          args: Prisma.ModerationCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ModerationCountAggregateOutputType> | number
        }
      }
    }
    Schedule: {
      payload: Prisma.$SchedulePayload<ExtArgs>
      fields: Prisma.ScheduleFieldRefs
      operations: {
        findUnique: {
          args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        findFirst: {
          args: Prisma.ScheduleFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        findMany: {
          args: Prisma.ScheduleFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[]
        }
        create: {
          args: Prisma.ScheduleCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        createMany: {
          args: Prisma.ScheduleCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[]
        }
        delete: {
          args: Prisma.ScheduleDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        update: {
          args: Prisma.ScheduleUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        deleteMany: {
          args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>[]
        }
        upsert: {
          args: Prisma.ScheduleUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$SchedulePayload>
        }
        aggregate: {
          args: Prisma.ScheduleAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateSchedule>
        }
        groupBy: {
          args: Prisma.ScheduleGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduleGroupByOutputType>[]
        }
        count: {
          args: Prisma.ScheduleCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.ScheduleCountAggregateOutputType> | number
        }
      }
    }
    User: {
      payload: Prisma.$UserPayload<ExtArgs>
      fields: Prisma.UserFieldRefs
      operations: {
        findUnique: {
          args: Prisma.UserFindUniqueArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findUniqueOrThrow: {
          args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findFirst: {
          args: Prisma.UserFindFirstArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload> | null
        }
        findFirstOrThrow: {
          args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        findMany: {
          args: Prisma.UserFindManyArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        create: {
          args: Prisma.UserCreateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        createMany: {
          args: Prisma.UserCreateManyArgs<ExtArgs>
          result: BatchPayload
        }
        createManyAndReturn: {
          args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        delete: {
          args: Prisma.UserDeleteArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        update: {
          args: Prisma.UserUpdateArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        deleteMany: {
          args: Prisma.UserDeleteManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateMany: {
          args: Prisma.UserUpdateManyArgs<ExtArgs>
          result: BatchPayload
        }
        updateManyAndReturn: {
          args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>[]
        }
        upsert: {
          args: Prisma.UserUpsertArgs<ExtArgs>
          result: runtime.Types.Utils.PayloadToResult<Prisma.$UserPayload>
        }
        aggregate: {
          args: Prisma.UserAggregateArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.AggregateUser>
        }
        groupBy: {
          args: Prisma.UserGroupByArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserGroupByOutputType>[]
        }
        count: {
          args: Prisma.UserCountArgs<ExtArgs>
          result: runtime.Types.Utils.Optional<Prisma.UserCountAggregateOutputType> | number
        }
      }
    }
  }
} & {
  other: {
    payload: any
    operations: {
      $executeRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $executeRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
      $queryRaw: {
        args: [query: TemplateStringsArray | Sql, ...values: any[]],
        result: any
      }
      $queryRawUnsafe: {
        args: [query: string, ...values: any[]],
        result: any
      }
    }
  }
}

/**
 * Enums
 */

export const TransactionIsolationLevel = runtime.makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
} as const)

export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


export const GuildScalarFieldEnum = {
  id: 'id',
  prefix: 'prefix',
  language: 'language',
  disableNaturalPrefix: 'disableNaturalPrefix',
  disabledCommands: 'disabledCommands',
  permissionsUsers: 'permissionsUsers',
  permissionsRoles: 'permissionsRoles',
  channelsMediaOnly: 'channelsMediaOnly',
  channelsLogsModeration: 'channelsLogsModeration',
  channelsLogsImage: 'channelsLogsImage',
  channelsLogsMemberAdd: 'channelsLogsMemberAdd',
  channelsLogsMemberRemove: 'channelsLogsMemberRemove',
  channelsLogsMemberNicknameUpdate: 'channelsLogsMemberNicknameUpdate',
  channelsLogsMemberUsernameUpdate: 'channelsLogsMemberUsernameUpdate',
  channelsLogsMemberRolesUpdate: 'channelsLogsMemberRolesUpdate',
  channelsLogsMessageDelete: 'channelsLogsMessageDelete',
  channelsLogsMessageDeleteNsfw: 'channelsLogsMessageDeleteNsfw',
  channelsLogsMessageUpdate: 'channelsLogsMessageUpdate',
  channelsLogsMessageUpdateNsfw: 'channelsLogsMessageUpdateNsfw',
  channelsLogsPrune: 'channelsLogsPrune',
  channelsLogsReaction: 'channelsLogsReaction',
  channelsLogsRoleCreate: 'channelsLogsRoleCreate',
  channelsLogsRoleUpdate: 'channelsLogsRoleUpdate',
  channelsLogsRoleDelete: 'channelsLogsRoleDelete',
  channelsLogsChannelCreate: 'channelsLogsChannelCreate',
  channelsLogsChannelUpdate: 'channelsLogsChannelUpdate',
  channelsLogsChannelDelete: 'channelsLogsChannelDelete',
  channelsLogsEmojiCreate: 'channelsLogsEmojiCreate',
  channelsLogsEmojiUpdate: 'channelsLogsEmojiUpdate',
  channelsLogsEmojiDelete: 'channelsLogsEmojiDelete',
  channelsLogsServerUpdate: 'channelsLogsServerUpdate',
  channelsLogsVoiceChannel: 'channelsLogsVoiceChannel',
  channelsIgnoreAll: 'channelsIgnoreAll',
  channelsIgnoreMessageEdit: 'channelsIgnoreMessageEdit',
  channelsIgnoreMessageDelete: 'channelsIgnoreMessageDelete',
  channelsIgnoreReactionAdd: 'channelsIgnoreReactionAdd',
  commandAutoDelete: 'commandAutoDelete',
  disabledChannels: 'disabledChannels',
  disabledCommandsChannels: 'disabledCommandsChannels',
  eventsBanAdd: 'eventsBanAdd',
  eventsBanRemove: 'eventsBanRemove',
  eventsTwemojiReactions: 'eventsTwemojiReactions',
  messagesIgnoreChannels: 'messagesIgnoreChannels',
  messagesModerationDm: 'messagesModerationDm',
  messagesModerationReasonDisplay: 'messagesModerationReasonDisplay',
  messagesModerationMessageDisplay: 'messagesModerationMessageDisplay',
  messagesModerationAutoDelete: 'messagesModerationAutoDelete',
  messagesModeratorNameDisplay: 'messagesModeratorNameDisplay',
  messagesAutoDeleteIgnoredAll: 'messagesAutoDeleteIgnoredAll',
  messagesAutoDeleteIgnoredRoles: 'messagesAutoDeleteIgnoredRoles',
  messagesAutoDeleteIgnoredChannels: 'messagesAutoDeleteIgnoredChannels',
  messagesAutoDeleteIgnoredCommands: 'messagesAutoDeleteIgnoredCommands',
  stickyRoles: 'stickyRoles',
  reactionRoles: 'reactionRoles',
  rolesAdmin: 'rolesAdmin',
  rolesInitial: 'rolesInitial',
  rolesInitialHumans: 'rolesInitialHumans',
  rolesInitialBots: 'rolesInitialBots',
  rolesModerator: 'rolesModerator',
  rolesMuted: 'rolesMuted',
  rolesRestrictedReaction: 'rolesRestrictedReaction',
  rolesRestrictedEmbed: 'rolesRestrictedEmbed',
  rolesRestrictedEmoji: 'rolesRestrictedEmoji',
  rolesRestrictedAttachment: 'rolesRestrictedAttachment',
  rolesRestrictedVoice: 'rolesRestrictedVoice',
  rolesPublic: 'rolesPublic',
  rolesRemoveInitial: 'rolesRemoveInitial',
  rolesUniqueRoleSets: 'rolesUniqueRoleSets',
  selfmodAttachmentsEnabled: 'selfmodAttachmentsEnabled',
  selfmodAttachmentsIgnoredRoles: 'selfmodAttachmentsIgnoredRoles',
  selfmodAttachmentsIgnoredChannels: 'selfmodAttachmentsIgnoredChannels',
  selfmodAttachmentsSoftAction: 'selfmodAttachmentsSoftAction',
  selfmodAttachmentsHardAction: 'selfmodAttachmentsHardAction',
  selfmodAttachmentsHardActionDuration: 'selfmodAttachmentsHardActionDuration',
  selfmodAttachmentsThresholdMaximum: 'selfmodAttachmentsThresholdMaximum',
  selfmodAttachmentsThresholdDuration: 'selfmodAttachmentsThresholdDuration',
  selfmodCapitalsEnabled: 'selfmodCapitalsEnabled',
  selfmodCapitalsIgnoredRoles: 'selfmodCapitalsIgnoredRoles',
  selfmodCapitalsIgnoredChannels: 'selfmodCapitalsIgnoredChannels',
  selfmodCapitalsMinimum: 'selfmodCapitalsMinimum',
  selfmodCapitalsMaximum: 'selfmodCapitalsMaximum',
  selfmodCapitalsSoftAction: 'selfmodCapitalsSoftAction',
  selfmodCapitalsHardAction: 'selfmodCapitalsHardAction',
  selfmodCapitalsHardActionDuration: 'selfmodCapitalsHardActionDuration',
  selfmodCapitalsThresholdMaximum: 'selfmodCapitalsThresholdMaximum',
  selfmodCapitalsThresholdDuration: 'selfmodCapitalsThresholdDuration',
  selfmodLinksEnabled: 'selfmodLinksEnabled',
  selfmodLinksAllowed: 'selfmodLinksAllowed',
  selfmodLinksIgnoredRoles: 'selfmodLinksIgnoredRoles',
  selfmodLinksIgnoredChannels: 'selfmodLinksIgnoredChannels',
  selfmodLinksSoftAction: 'selfmodLinksSoftAction',
  selfmodLinksHardAction: 'selfmodLinksHardAction',
  selfmodLinksHardActionDuration: 'selfmodLinksHardActionDuration',
  selfmodLinksThresholdMaximum: 'selfmodLinksThresholdMaximum',
  selfmodLinksThresholdDuration: 'selfmodLinksThresholdDuration',
  selfmodMessagesEnabled: 'selfmodMessagesEnabled',
  selfmodMessagesIgnoredRoles: 'selfmodMessagesIgnoredRoles',
  selfmodMessagesIgnoredChannels: 'selfmodMessagesIgnoredChannels',
  selfmodMessagesMaximum: 'selfmodMessagesMaximum',
  selfmodMessagesQueueSize: 'selfmodMessagesQueueSize',
  selfmodMessagesSoftAction: 'selfmodMessagesSoftAction',
  selfmodMessagesHardAction: 'selfmodMessagesHardAction',
  selfmodMessagesHardActionDuration: 'selfmodMessagesHardActionDuration',
  selfmodMessagesThresholdMaximum: 'selfmodMessagesThresholdMaximum',
  selfmodMessagesThresholdDuration: 'selfmodMessagesThresholdDuration',
  selfmodNewlinesEnabled: 'selfmodNewlinesEnabled',
  selfmodNewlinesIgnoredRoles: 'selfmodNewlinesIgnoredRoles',
  selfmodNewlinesIgnoredChannels: 'selfmodNewlinesIgnoredChannels',
  selfmodNewlinesMaximum: 'selfmodNewlinesMaximum',
  selfmodNewlinesSoftAction: 'selfmodNewlinesSoftAction',
  selfmodNewlinesHardAction: 'selfmodNewlinesHardAction',
  selfmodNewlinesHardActionDuration: 'selfmodNewlinesHardActionDuration',
  selfmodNewlinesThresholdMaximum: 'selfmodNewlinesThresholdMaximum',
  selfmodNewlinesThresholdDuration: 'selfmodNewlinesThresholdDuration',
  selfmodInvitesEnabled: 'selfmodInvitesEnabled',
  selfmodInvitesIgnoredCodes: 'selfmodInvitesIgnoredCodes',
  selfmodInvitesIgnoredGuilds: 'selfmodInvitesIgnoredGuilds',
  selfmodInvitesIgnoredRoles: 'selfmodInvitesIgnoredRoles',
  selfmodInvitesIgnoredChannels: 'selfmodInvitesIgnoredChannels',
  selfmodInvitesSoftAction: 'selfmodInvitesSoftAction',
  selfmodInvitesHardAction: 'selfmodInvitesHardAction',
  selfmodInvitesHardActionDuration: 'selfmodInvitesHardActionDuration',
  selfmodInvitesThresholdMaximum: 'selfmodInvitesThresholdMaximum',
  selfmodInvitesThresholdDuration: 'selfmodInvitesThresholdDuration',
  selfmodFilterEnabled: 'selfmodFilterEnabled',
  selfmodFilterRaw: 'selfmodFilterRaw',
  selfmodFilterIgnoredRoles: 'selfmodFilterIgnoredRoles',
  selfmodFilterIgnoredChannels: 'selfmodFilterIgnoredChannels',
  selfmodFilterSoftAction: 'selfmodFilterSoftAction',
  selfmodFilterHardAction: 'selfmodFilterHardAction',
  selfmodFilterHardActionDuration: 'selfmodFilterHardActionDuration',
  selfmodFilterThresholdMaximum: 'selfmodFilterThresholdMaximum',
  selfmodFilterThresholdDuration: 'selfmodFilterThresholdDuration',
  selfmodReactionsEnabled: 'selfmodReactionsEnabled',
  selfmodReactionsIgnoredRoles: 'selfmodReactionsIgnoredRoles',
  selfmodReactionsIgnoredChannels: 'selfmodReactionsIgnoredChannels',
  selfmodReactionsMaximum: 'selfmodReactionsMaximum',
  selfmodReactionsAllowed: 'selfmodReactionsAllowed',
  selfmodReactionsBlocked: 'selfmodReactionsBlocked',
  selfmodReactionsSoftAction: 'selfmodReactionsSoftAction',
  selfmodReactionsHardAction: 'selfmodReactionsHardAction',
  selfmodReactionsHardActionDuration: 'selfmodReactionsHardActionDuration',
  selfmodReactionsThresholdMaximum: 'selfmodReactionsThresholdMaximum',
  selfmodReactionsThresholdDuration: 'selfmodReactionsThresholdDuration',
  selfmodIgnoredChannels: 'selfmodIgnoredChannels',
  noMentionSpamEnabled: 'noMentionSpamEnabled',
  noMentionSpamAlerts: 'noMentionSpamAlerts',
  noMentionSpamMentionsAllowed: 'noMentionSpamMentionsAllowed',
  noMentionSpamTimePeriod: 'noMentionSpamTimePeriod',
  eventsUnknownMessages: 'eventsUnknownMessages',
  eventsIncludeBots: 'eventsIncludeBots',
  channelsIgnoreVoiceActivity: 'channelsIgnoreVoiceActivity',
  eventsTimeout: 'eventsTimeout'
} as const

export type GuildScalarFieldEnum = (typeof GuildScalarFieldEnum)[keyof typeof GuildScalarFieldEnum]


export const MigrationScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  name: 'name'
} as const

export type MigrationScalarFieldEnum = (typeof MigrationScalarFieldEnum)[keyof typeof MigrationScalarFieldEnum]


export const ModerationScalarFieldEnum = {
  caseId: 'caseId',
  createdAt: 'createdAt',
  duration: 'duration',
  extraData: 'extraData',
  guildId: 'guildId',
  moderatorId: 'moderatorId',
  reason: 'reason',
  imageURL: 'imageURL',
  userId: 'userId',
  type: 'type',
  metadata: 'metadata'
} as const

export type ModerationScalarFieldEnum = (typeof ModerationScalarFieldEnum)[keyof typeof ModerationScalarFieldEnum]


export const ScheduleScalarFieldEnum = {
  id: 'id',
  taskId: 'taskId',
  time: 'time',
  recurring: 'recurring',
  catchUp: 'catchUp',
  data: 'data'
} as const

export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


export const UserScalarFieldEnum = {
  id: 'id',
  moderationDM: 'moderationDM'
} as const

export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


export const SortOrder = {
  asc: 'asc',
  desc: 'desc'
} as const

export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


export const JsonNullValueInput = {
  JsonNull: JsonNull
} as const

export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


export const NullableJsonNullValueInput = {
  DbNull: DbNull,
  JsonNull: JsonNull
} as const

export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


export const QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
} as const

export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


export const JsonNullValueFilter = {
  DbNull: DbNull,
  JsonNull: JsonNull,
  AnyNull: AnyNull
} as const

export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


export const NullsOrder = {
  first: 'first',
  last: 'last'
} as const

export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]



/**
 * Field references
 */


/**
 * Reference to a field of type 'String'
 */
export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


/**
 * Reference to a field of type 'String[]'
 */
export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


/**
 * Reference to a field of type 'Boolean'
 */
export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


/**
 * Reference to a field of type 'Json'
 */
export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


/**
 * Reference to a field of type 'QueryMode'
 */
export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


/**
 * Reference to a field of type 'Int'
 */
export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


/**
 * Reference to a field of type 'Int[]'
 */
export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


/**
 * Reference to a field of type 'BigInt'
 */
export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


/**
 * Reference to a field of type 'BigInt[]'
 */
export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    


/**
 * Reference to a field of type 'DateTime'
 */
export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


/**
 * Reference to a field of type 'DateTime[]'
 */
export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


/**
 * Reference to a field of type 'Float'
 */
export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


/**
 * Reference to a field of type 'Float[]'
 */
export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    

/**
 * Batch Payload for updateMany & deleteMany & createMany
 */
export type BatchPayload = {
  count: number
}


export type Datasource = {
  url?: string
}
export type Datasources = {
  db?: Datasource
}

export const defineExtension = runtime.Extensions.defineExtension as unknown as runtime.Types.Extensions.ExtendsHook<"define", TypeMapCb, runtime.Types.Extensions.DefaultArgs>
export type DefaultPrismaClient = PrismaClient
export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
export interface PrismaClientOptions {
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasources?: Datasources
  /**
   * Overwrites the datasource url from your schema.prisma file
   */
  datasourceUrl?: string
  /**
   * @default "colorless"
   */
  errorFormat?: ErrorFormat
  /**
   * @example
   * ```
   * // Shorthand for `emit: 'stdout'`
   * log: ['query', 'info', 'warn', 'error']
   * 
   * // Emit as events only
   * log: [
   *   { emit: 'event', level: 'query' },
   *   { emit: 'event', level: 'info' },
   *   { emit: 'event', level: 'warn' }
   *   { emit: 'event', level: 'error' }
   * ]
   * 
   * / Emit as events and log to stdout
   * og: [
   *  { emit: 'stdout', level: 'query' },
   *  { emit: 'stdout', level: 'info' },
   *  { emit: 'stdout', level: 'warn' }
   *  { emit: 'stdout', level: 'error' }
   * 
   * ```
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
   */
  log?: (LogLevel | LogDefinition)[]
  /**
   * The default values for transactionOptions
   * maxWait ?= 2000
   * timeout ?= 5000
   */
  transactionOptions?: {
    maxWait?: number
    timeout?: number
    isolationLevel?: TransactionIsolationLevel
  }
  /**
   * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
   */
  adapter?: runtime.SqlDriverAdapterFactory | null
  /**
   * Global configuration for omitting model fields by default.
   * 
   * @example
   * ```
   * const prisma = new PrismaClient({
   *   omit: {
   *     user: {
   *       password: true
   *     }
   *   }
   * })
   * ```
   */
  omit?: GlobalOmitConfig
}
export type GlobalOmitConfig = {
  guild?: Prisma.GuildOmit
  migration?: Prisma.MigrationOmit
  moderation?: Prisma.ModerationOmit
  schedule?: Prisma.ScheduleOmit
  user?: Prisma.UserOmit
}

/* Types for Logging */
export type LogLevel = 'info' | 'query' | 'warn' | 'error'
export type LogDefinition = {
  level: LogLevel
  emit: 'stdout' | 'event'
}

export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

export type GetLogType<T> = CheckIsLogLevel<
  T extends LogDefinition ? T['level'] : T
>;

export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
  ? GetLogType<T[number]>
  : never;

export type QueryEvent = {
  timestamp: Date
  query: string
  params: string
  duration: number
  target: string
}

export type LogEvent = {
  timestamp: Date
  message: string
  target: string
}
/* End Types for Logging */


export type PrismaAction =
  | 'findUnique'
  | 'findUniqueOrThrow'
  | 'findMany'
  | 'findFirst'
  | 'findFirstOrThrow'
  | 'create'
  | 'createMany'
  | 'createManyAndReturn'
  | 'update'
  | 'updateMany'
  | 'updateManyAndReturn'
  | 'upsert'
  | 'delete'
  | 'deleteMany'
  | 'executeRaw'
  | 'queryRaw'
  | 'aggregate'
  | 'count'
  | 'runCommandRaw'
  | 'findRaw'
  | 'groupBy'

/**
 * `PrismaClient` proxy available in interactive transactions.
 */
export type TransactionClient = Omit<DefaultPrismaClient, runtime.ITXClientDenyList>

